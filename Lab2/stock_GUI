import tkinter as tk
from tkinter import simpledialog, messagebox , filedialog
from datetime import datetime
import matplotlib.pyplot as plt
import stock_data 
from stock_data import Stock, import_stock_web_csv
import csv
import os

class StockGUI:
    def __init__(self, root, stock_list):
        self.root = root
        self.stock_list = stock_list
        self.root.title("Stock Data GUI")
        self.root.geometry("600x400")

        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(expand=True)


        # Stock selection list
        self.stockList = tk.Listbox(self.main_frame, height=5)
        for stock in self.stock_list:
            self.stockList.insert(tk.END, stock.symbol)
        self.stockList.pack(pady=10)

        # Main buttons
        tk.Button(self.main_frame, text="Scrape Data", width=20, command=self.scrape_web_data).pack(pady=10)
        tk.Button(self.main_frame, text="Create Chart", width=20, command=self.create_chart).pack(pady=10)
        tk.Button(self.main_frame, text="CSV file", width=20, command=self.importCSV_web_data).pack(pady=10)
        
        tk.Button(self.main_frame, text="Exit", width=20, command=self.root.quit).pack(pady=10)

    def show_output_screen(self, title, lines):
        output_win = tk.Toplevel(self.root)
        output_win.title(title)
        text = tk.Text(output_win, wrap=tk.WORD, width=80, height=30)
        text.pack(padx=10, pady=10)
        for line in lines:
            text.insert(tk.END, line + "\n")


    def scrape_web_data(self):
        dateFrom = simpledialog.askstring("Starting Date", "Enter Starting Date (m/d/yy)")
        dateTo = simpledialog.askstring("Ending Date", "Enter Ending Date (m/d/yy)")

        try:
            Stock.retrieve_stock_web(dateFrom, dateTo, self.stock_list)
        except Exception:
            messagebox.showerror("Cannot Get Data from Web", "Check Path for Chrome Driver")
            return

        self.display_stock_data()
        messagebox.showinfo("Get Data From Web", "Data Retrieved")

    def create_chart(self):
        symbol = simpledialog.askstring("Stock Symbol", "Enter stock symbol to chart:")
        #symbol = symbols
        if not symbol:
            return

        matched = next((s for s in self.stock_list if s.symbol.upper() == symbol.upper()), None)
        if not matched or not matched.DataList:
            messagebox.showerror("Chart Error", f"No data found for symbol '{symbol}'")
            return

        try:
            sorted_data = sorted(matched.DataList, key=lambda x: datetime.strptime(x.date, "%b %d, %Y"))
            dates = [datetime.strptime(d.date, "%b %d, %Y") for d in sorted_data]
            closes = [d.close for d in sorted_data]

            plt.figure(figsize=(10, 5))
            plt.plot(dates, closes, marker='o')
            plt.title(f"{symbol.upper()} Closing Prices")
            plt.xlabel("Date")
            plt.ylabel("Close Price ($)")
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()
        except Exception as e:
            messagebox.showerror("Chart Error", f"Error generating chart: {e}")

    def importCSV_web_data(self):
        print("Import button clicked")
        symbol = self.stockList.get(self.stockList.curselection())
        filename = filedialog.askopenfilename(
            title="Select " + symbol + " File to Import",
            filetypes=[('Yahoo Finance! CSV', '*.csv')])

        if filename != "":
            stock_data.import_stock_web_csv(self.stock_list, symbol, filename)
            self.display_stock_data()
            messagebox.showinfo("Import Complete", symbol + " Import Complete")


    def display_stock_data(self):
        print("Displaying stock data")

if __name__ == "__main__":
    import tkinter as tk
    from tkinter import simpledialog

    root = tk.Tk()
    root.withdraw()  # Hide the root window while asking for input

    symbol_input = simpledialog.askstring(
        "Stock Symbols", "Enter stock symbols separated by commas (e.g., AAPL, MSFT, GOOG):"
    )

    if symbol_input:
        symbols = [s.strip().upper() for s in symbol_input.split(",") if s.strip()]
        stock_list = [Stock(symbol) for symbol in symbols]
        root.deiconify()  # Show the main window now
        app = StockGUI(root, stock_list)
        root.mainloop()
    else:
        print("No symbols entered. Exiting.")